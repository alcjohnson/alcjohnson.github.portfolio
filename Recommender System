{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "064a5d6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#load the libraries \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics.pairwise import cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "404c05e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#load the data \n",
    "ratings_file = 'u.data'\n",
    "movies_file = 'u.item'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "19ccf67d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert the data \n",
    "column_names = ['user_id', 'item_id', 'rating', 'timestamp']\n",
    "ratings = pd.read_csv(ratings_file, sep='\\t', names=column_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8e6346c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert the data continued \n",
    "movie_info = pd.read_csv(movies_file, sep='|', names=['item_id', 'title'], usecols=[0,1],encoding='latin-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "229b00f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#merge the two different forms of data \n",
    "data = pd.merge(ratings, movie_info, on='item_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ebe273d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#put the data into a pivot table \n",
    "user_movie_matrix = data.pivot_table(index='user_id', columns='title', values='rating')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "13b3a59e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fill missing values \n",
    "user_movie_matrix = user_movie_matrix.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e41e30c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#find the cosine \n",
    "movie_similarity = cosine_similarity(user_movie_matrix.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bcabfab1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#find the similarity on the df \n",
    "movie_similarity_df = pd.DataFrame(movie_similarity, index = user_movie_matrix.columns, columns=user_movie_matrix.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a7bd3008",
   "metadata": {},
   "outputs": [],
   "source": [
    "# functoin to recommend movies based off movie title\n",
    "def recommend_movies(movie_title, similarity_matrix, n=10):\n",
    "    similar_movies = similarity_matrix[movie_title].sort_values(ascending=False)\n",
    "    recommendations = similar_movies.iloc[1:n+1]\n",
    "    return recommendations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8c39b484",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "title\n",
      "Star Wars (1977)                                0.734572\n",
      "Return of the Jedi (1983)                       0.699925\n",
      "Independence Day (ID4) (1996)                   0.689786\n",
      "Rock, The (1996)                                0.664555\n",
      "Mission: Impossible (1996)                      0.641322\n",
      "Willy Wonka and the Chocolate Factory (1971)    0.638158\n",
      "Star Trek: First Contact (1996)                 0.636727\n",
      "Fargo (1996)                                    0.630601\n",
      "Jerry Maguire (1996)                            0.624075\n",
      "Raiders of the Lost Ark (1981)                  0.622382\n",
      "Name: Toy Story (1995), dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#example \n",
    "movie_title = 'Toy Story (1995)' #user input \n",
    "recommended_movies = recommend_movies(movie_title, movie_similarity_df)\n",
    "print(recommended_movies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b87424b3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
